<?php

use PHPUnit\Framework\TestCase;

class ApplicationTest extends TestCase
{
    // Check connection to DB -- Done
    // Check if can do query And create Tables -- Done
    //

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    function test_connected_to_db()
    {
        $pdo = (new \App\Lib\Services\SQLite())->connect();
        $this->assertNotNull($pdo);
    }

    function test_can_query()
    {
        $queryBuilder = new \App\Lib\Services\SQLiteQueryBuilder();
        $query = $queryBuilder->createTable("users",
        [
            "id INTEGER PRIMARY KEY",
            "name TEXT NOT NULL",
            "last_name TEXT not null"
        ]);

        $sqlite = new \App\Lib\Services\SQLite();
        $sqlite->connect();
        $sqlite->query($query);
        $tables = $sqlite->getTables();
        $this->assertEquals(['books','purchaces','users'],$tables);

        $query = $queryBuilder->table('users')->select('*')->get();

        $users = $sqlite->fetchData($query);
        $this->assertIsArray($users);
    }

    function test_can_get_users()
    {
        $controller = new LibraryController();
        $users = $controller->getUsers();
        $this->assertIsArray($users);
        $this->assertTrue(count($users)>0);
    }

    function test_can_get_books()
    {
        $controller = new LibraryController();
        $books = $controller->getBooks();
        $this->assertIsArray($books);
        $this->assertTrue(count($books)>0);
    }

    function test_can_get_purchases()
    {
        $controller = new LibraryController();
        $users = $controller->getUsers();
        $randomUser = $users[rand(0,count($users))];
        $user = new \App\Models\User($randomUser['id'],$randomUser['first_name'],$randomUser['last_name']);

        $purchases = $controller->getAllUserPurchaces($user);
        $this->assertIsArray($purchases);
        $this->assertTrue(count($purchases)>0);
    }
}

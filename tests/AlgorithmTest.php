<?php
ini_set('memory_limit', '512M');

use PHPUnit\Framework\TestCase;

class AlgorithmTest extends TestCase
{
    // create a sorted array with 1 mil. records
    // search for the position of the desired number
    // mutiples will return first result

    // Check if array is sorted


    public $binarySearch;
    public $empty_data = [];
    public $one_element = [1];
    public $two_elements = [1,2];
    public $many_elements = [0, 1, 2, 9, 10, 13, 25, 45, 67, 159, 200, 253, 321, 444, 500, 569, 600];
    public $many_elements_with_duplicates = [0, 1, 2,2, 9, 10, 13, 25, 45,45, 67, 159, 200, 253, 321,321, 444, 500, 569, 600];
    public $one_milion_elements = [];
    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $algorithmController = new \App\Controllers\AlgorithmController();
        $this->one_milion_elements = $algorithmController->createOneMilionRecords();
        sort($this->one_milion_elements);
        $this->binarySearch = new \App\Lib\Helpers\BinarySearch();
    }


    public function testEmptyData()
    {
        $result = $this->binarySearch->search(5, $this->empty_data);
        $this->assertEquals($result, -1);
    }
    public function testOneElement()
    {
        $result = $this->binarySearch->search(1, $this->one_element);
        $this->assertEquals($result, 0);
        $result = $this->binarySearch->search(2, $this->one_element);
        $this->assertEquals($result, -1);
    }
    public function testTwoElements()
    {
        $result = $this->binarySearch->search(1, $this->two_elements);
        $this->assertEquals($result, 0);
        $result = $this->binarySearch->search(2, $this->two_elements);
        $this->assertEquals($result, 1);
    }
    public function testManyElements()
    {
        $result = $this->binarySearch->search(9, $this->many_elements);
        $this->assertEquals($result, 3);
        $result = $this->binarySearch->search(0, $this->many_elements);
        $this->assertEquals($result, 0);
        $result = $this->binarySearch->search(13, $this->many_elements);
        $this->assertEquals($result, 5);
        $result = $this->binarySearch->search(67, $this->many_elements);
        $this->assertEquals($result, 8);
        $result = $this->binarySearch->search(500, $this->many_elements);
        $this->assertEquals($result, 14);
    }
    public function testLastFirstElement()
    {
        $result = $this->binarySearch->search(0, $this->many_elements);
        $this->assertEquals($result, 0);
        $result = $this->binarySearch->search(600, $this->many_elements);
        $this->assertEquals($result, 16);
    }
    public function testDataIsNotIncluded()
    {
        $result = $this->binarySearch->search(10000, $this->many_elements);
        $this->assertEquals($result, -1);
        $result = $this->binarySearch->search(-2452, $this->many_elements);
        $this->assertEquals($result, -1);
    }

    public function testDuplicatedData()
    {
        $result = $this->binarySearch->search(2, $this->many_elements_with_duplicates);
        $this->assertEquals($result,2);

        $result = $this->binarySearch->search(45, $this->many_elements_with_duplicates);
        $this->assertNotEquals($result,9);

        $result = $this->binarySearch->search(45, $this->many_elements_with_duplicates);
        $this->assertEquals($result,8);

    }

    public function testOneMilion(){
        $total = count($this->one_milion_elements);
        $this->assertEquals($total,1000000);
    }

    public function testOneMilionIsSorted(){
        $this->assertTrue($this->one_milion_elements[0] < $this->one_milion_elements[50]);
        $this->assertTrue($this->one_milion_elements[100] < $this->one_milion_elements[1000]);
        $this->assertTrue($this->one_milion_elements[500] < $this->one_milion_elements[5000]);
        $this->assertTrue($this->one_milion_elements[10000] < $this->one_milion_elements[500000]);
        $this->assertTrue($this->one_milion_elements[500000] < $this->one_milion_elements[999999]);
    }


}
